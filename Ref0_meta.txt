include::license.txt[]

:language: C

// The Libevent Reference Manual: Preliminaries
Libeventリファレンスマニュアル: 準備
------------------------------------

// Libevent from 10,000 feet
Libevent俯瞰
~~~~~~~~~~~~

// Libevent is a library for writing fast portable nonblocking IO.  Its
// design goals are:
Libeventは高速で移植性のある、非ブロッキング入出力を書くためのライブラリです。以下にLibeventの設計目標を示します。

// Portability::
//     A program written using Libevent should work across all the
//     platforms Libevent supports.  Even when there is no really _good_
//     way to do nonblocking IO, Libevent should support the so-so
//     ways, so that your program can run in restricted environments.
移植性があること::
    Libeventを用いて書かれてプログラムはLibeventがサポートしているすべてのプラットフォーム間で動作するべきです。また、非ブロッキング入出力にすることが _よい_ とはとてもいえないようなときでさえ、限られた環境ではプログラムが動作するように、まずまずのやり方をサポートするべきです。

// Speed::
//     Libevent tries to use the fastest available nonblocking IO
//     implementations on each platform, and not to introduce much
//     overhead as it does so.
高速であること::
    Libeventはそれぞれのプラットフォーム上で利用できる非ブロッキング入出力の実装のうちで最も高速なものを利用しようとします。そして、それをするのにそれほど大きなオーバーヘッドを招かないようにします。

// Scalability::
//     Libevent is designed to work well even with programs that need to
//     have tens of thousands of active sockets.
スケールすること::
    Libeventは数万ものアクティブなソケットを持たせる必要のあるプログラムでさえも、ちゃんと動作するように設計されています。

// Convenience::
//     Whenever possible, the most natural way to write a program with
//     Libevent should be the stable, portable way.
利用しやすいこと::
    可能なときはいつでも、Libeventを使ってプログラムを書く最も自然なやり方が、安定して移植可能なやり方でもあるべきです。

// Libevent is divided into the following components:
Libeventは以下の構成要素に分かれています。

evutil::
//     Generic functionality to abstract out the differences between
//     different platforms' networking implementations.
    汎用の機能で、異なるプラットフォームのネットワーク実装の間にある差異を抽象化して除くためにあります。

// event and event_base::
//     This is the heart of Libevent.  It provides an abstract API to
//     the various platform-specific, event-based nonblocking IO backends.
//     It can let you know when sockets are ready to read or write, do
//     basic timeout functionality, and detect OS signals.
eventとevent_base::
    Libeventの中心部分です。プラットフォーム固有で、イベント・ベースの非ブロッキング入出力である様々なバックエンドに対しての、抽象的なAPIを提供します。ソケット読み書き準備ができたときの通知、基本的なタイムアウト機能、そして、OSからのシグナル検出ができます。

bufferevent::
//     These functions provide a more convenient wrapper around
//     Libevent's event-based core.  They let your application request
//     buffered reads and writes, and rather than informing you when
//     sockets are ready to do, they let you know when IO has actually
//     occurred.
//
//     The bufferevent interface also has multiple backends, so that
//     it can take advantage of systems that provide faster ways to do
//     nonblocking IO, such as the Windows IOCP API.
    bufferevent内の関数は、Libeventのイベント・ベースの中心機能へのより便利なラッパーを提供します。アプリケーションは、バッファありの読み込みや書き込みを関数にリクエストすることができます。リクエストは、ソケットが準備可能になったときにそのことを通知をするのではなく、入出力が実際に行われたときに通知します。

    また、buffereventインターフェースは複数のバックエンドを持ちます。
    そのようにすることで、Windows IO完了ポートAPIのような、非ブロッキング入出力のより高速なやり方を提供しているシステムを利用することができます。

evbuffer::
//     This module implements the buffers underlying bufferevents,
//     and provides functions for efficient and/or convenient access.
    このモジュールはbuffereventの中にあるバッファを実装しています。そして、バッファに効率的にアクセスするための関数や、バッファに簡単にアクセスするための関数を提供します。

evhttp::
//     A simple HTTP client/server implementation.
    簡単なHTTPクライアント/サーバの実装です。

evdns::
//     A simple DNS client/server implementation.
    簡単なDNSクライアント/サーバの実装です。

evrpc::
//     A simple RPC implementation.
    簡単なRPCの実装です。


// The Libraries
ライブラリ
~~~~~~~~~~

// When Libevent is built, by default it installs the following
// libraries:
Libeventをビルドすると、デフォルトでは以下のライブラリがインストールされます。

libevent_core::
//     All core event and buffer functionality.  This
//     library contains all the event_base, evbuffer, bufferevent,
//     and utility functions.
    イベントやバッファすべての中心機能です。このライブラリはevent_base、evbuffer、bufferevent、汎用的な関数すべてが入っています。

libevent_extra::
//     This library defines protocol-specific functionality that
//     you may or may not want for your application, including HTTP, DNS,
//     and RPC.
    このライブラリはアプリケーションで必要になる場合がある、プロトコル固有の機能を提供します。HTTPやDNS、RPCが入っています。

libevent::
//     This library exists for historical reasons; it contains the
//     contents of both libevent_core and libevent_extra.  You shouldn't
//     use it; it may go away in a future version of Libevent.
    このライブラリは歴史的な理由で存在していて、libevent_coreとlibevent_extra両方の内容が入っています。Libeventの将来的なバージョンでは廃止される可能性があるので使うべきではありません。

// The following libraries are installed only on some platforms:
以下のライブラリはいくつかのプラットフォームのみでインストールされます。

libevent_pthreads::
//     This library adds threading and locking implementations based on
//     the pthreads portable threading library.  It is separated from
//     libevent_core so that you don't need to link against pthreads
//     to use Libevent unless you are _actually_ using Libevent in a
//     multithreaded way.
    このライブラリは移植性のあるスレッドライブラリpthreadをベースにしたスレッドとロックの実装を付け加えます。libevent_coreと分かれているので、_実際に_マルチスレッドでLibeventを使用しない限りは、pthreadをリンクする必要はありません。

libevent_openssl::
//     This library provides support for encrypted communications using
//     bufferevents and the OpenSSL library.  It is separated from
//     libevent_core so that you don't need to link against OpenSSL
//     to use Libevent unless you are _actually_ using encrypted
//     connections.
    このライブラリはbuffereventとOpenSSLライブラリを用いた暗号化通信をサポートします。libevent_coreと分かれているので、_実際に_暗号化接続を使用しない限りは、Libeventを用いるのにOpenSSLをリンクする必要はありません。

// The Headers
ヘッダ
~~~~~~

// All current public Libevent headers are installed under the 'event2'
// directory.  Headers fall into three broad classes:
現在公開されているLibeventのヘッダすべては 'event2' ディレクトリ以下にインストールされています。ヘッダは3つの種類に分かれます。

// API headers::
//     An API header is one that defines current public interfaces to
//     Libevent.  These headers have no special suffix.
APIヘッダ::
    APIヘッダはLibeventの現在公開されているインターフェースを定義しているヘッダです。ヘッダ名は末尾に特別な文字列を付けません。

// Compatibility headers::
//     A compatibility header includes definitions for deprecated
//     functions.  You shouldn't include it unless you're porting a
//     program from an older version of Libevent.
互換性ヘッダ::
    互換性ヘッダは非推奨関数の定義が含まれています。Libeventの旧バージョンからプログラムを移植しない限りはこのヘッダをインクルードするべきではありません。

// Structure headers::
//     These headers define structures with relatively volatile layouts.
//     Some of these are exposed in case you need fast access to
//     structure component; some are exposed for historical reasons.
//     Relying on any of the structures in headers directly can break
//     your program's binary compatibility with other versions of
//     Libevent, sometimes in hard-to-debug ways.  These headers have the
//     suffix "_struct.h"
構造体ヘッダ::
    構造体ヘッダは、比較的構成が変わりやすい構造体を定義しています。いくつかのヘッダは構造体の構成要素を素早くアクセスする必要がある場合に備えて公開されています。また、いくつかは歴史的な理由で公開されています。構造体ヘッダ内のどのような構造体についても、直接的な依存関係を持たせると、Libeventの他のバージョンとのバイナリ互換性を壊す可能性があります。場合によっては、デバッグが困難な状態で互換性が壊れることもあります。構造体ヘッダのヘッダ名は末尾に"_struct.h"が付きます。

// (There are also older versions of the Libevent headers without the
// 'event2' directory.  See "If you have to work with an old version of
// Libevent" below.)
(旧バージョンのLibeventヘッダもあります。これらは 'event2' ディレクトリが付きません。下に示した「もしLibeventの旧バージョンを動かさなければならないなら」を参照してください。)

// If you have to work with an old version of Libevent
もしLibeventの旧バージョンを動かさなかればならないなら
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// Libevent 2.0 has revised its APIs to be generally more rational and
// less error-prone.  If it's possible, you should write new programs to
// use the Libevent 2.0 APIs.  But sometimes you might need to work with
// the older APIs, either to update an existing application, or to
// support an environment where for some reason you can't install
// Libevent 2.0 or later.
Libevent 2.0は、APIを、より合理的でエラーを起こしにくくなるように改定しました。可能な場合は、Libevent2.0のAPIを使用して新しいプログラムを書くべきです。しかし、時々、現存するアプリケーションをアップデートするため、もしくは、何かしらの理由でLibevent 2.0以降をインストールできない環境をサポートするためのどちらにせよ、古いAPIを扱う必要があるかもしれません。

// Older versions of Libevent had fewer headers, and did not install them
// under "event2":
Libeventの古いバージョンはわずかなヘッダしかなく、ヘッダは"event2"配下にインストールされていませんでした。以下を参照してください。

[options="header",width="80%",cols="30%,70%"]
|======================================================================
| 古いヘッダ... | ...置き換え後の現在のヘッダ
| event.h    | event2/event*.h, event2/buffer*.h event2/bufferevent*.h
event2/tag*.h
| evdns.h    | event2/dns*.h
| evhttp.h   | event2/http*.h
| evrpc.h    | event2/rpc*.h
| evutil.h   | event2/util*.h
|======================================================================

// In Libevent 2.0 and later, the old headers still exist as wrappers for
// the new headers.
Libevent 2.0以降では、古いヘッダファイルは新しいヘッダへのラッパーとして今でも存在しています。

// Some other notes on working with older versions:
古いバージョンを扱う際の他いくつかの注意点を以下に示します。

// - Before 1.4, there was only one library, "libevent", that contained
//   the functionality currently split into libevent_core and
//   libevent_extra.
- 1.4より前は1つのライブラリ"libevent"しかなく、現在libevent_coreとlibevent_extraに分かれている機能が入っていました。
// - Before 2.0, there was no support for locking; Libevent could be
//   thread-safe, but only if you made sure to never use the same
//   structure from two threads at the same time.
- 2.0より前は、ロックのサポートはありませんでした。Libeventはスレッドセーフにすることはできましたが、2つのスレッドから同時に同じ構造体を絶対に使用していないことが確認できる場合に限られていました。

// Individual sections below will discuss the obsolete APIs that you
// might encounter for specific areas of the codebase.
下に示した個別のセクションではコードベース中の特定の場所で出会うかもしれない古いAPIについて議論します。

// Notes on version status
バージョン状態についての注意
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// Versions of Libevent before 1.4.7 or so should be considered totally
// obsolete.  Versions of Libevent before 1.3e or so should be considered
// hopelessly bug-ridden.
1.4.7ぐらい前のLibeventのバージョンはすっかり古いものとみなすべきです。そして、1.3eぐらい前のLibeventのバージョンはよい期待もなくバグが載っているとみなすべきです。

// (Also, please don't send the Libevent maintainers any new features for
// 1.4.x or earlier---it's supposed to stay as a stable release.  And
// if you encounter a bug in 1.3x or earlier, please make sure that it
// still exists in the latest stable version before you report it:
// subsequent releases have happened for a reason.)
(また、1.4.x以前のバージョンに対してメンテナーに新しい機能を送らないでください。このバージョンは安定版のリリースであり続けたいと考えられているからです。そして、1.3x以前でバグに当たったら、そのことを報告する前に最新の安定版にもまだ存在しているかを確認してください。つまり、後続のリリースで意味があって起きているのかを調べてください。)
